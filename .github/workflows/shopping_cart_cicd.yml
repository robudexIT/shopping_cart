name: Shopping Cart Action 

on: workflow_dispatch #manual trigger
# on: 
#  pull_request:
#    branches: main
   
permissions:
  issues: write
jobs: 
  # Test:
  #   runs-on: ubuntu-latest
  #   environment: production
  #   env: 
  #     repo: shopping-cart 
  #   steps: 
  #     - name: echo env 
  #       run: echo  ${{ secrets.DOCKERHUB_USERNAME }}/"$repo":latest 
        
  TestingCode: 
    runs-on: ubuntu-latest  #this runner has install maven by default
    steps: 
      
      - name: Code Checkout 
        uses: actions/checkout@v4 
    
      - name: Maven Test 
        run: mvn test 

      - name: Maven Checkstyle
        run: mvn checkstyle:checkstyle 

      - name: Install Java 11 
        uses: actions/setup-java@v4 
        with: 
          distribution: 'temurin' 
          java-version: '11'
    
      - name: Setup SonarQube 
        uses: warchant/setup-sonar-scanner@v7 

      - name: SonarQube Scan 
        run: sonar-scanner 
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src/ 
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
            -Dsonar.java.binaries=target/classes/com/shashi/

      - name: SonarQube Quality Gate Check 
        id: sonarqube-quality-gate-check 
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5 
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URLL }}
  
  BuildAndPushForTesting:
    runs-on: ubuntu-latest 
    needs: TestingCode
    env: 
      DOCKER_REPO: shopping-cart 
    steps: 
      - name: Code Checkout 
        uses: actions/checkout@v4 

      - name: Update application.properties file
        env:
           DB_TEST_IP: ${{ secrets.DB_TEST_IP }}
           DB_TEST_USERNAME: ${{ secrets.DB_TEST_USERNAME }}
           DB_TEST_PWD: ${{ secrets.DB_TEST_PWD }}
        run: |
          sed -i "s|db.connectionString =.*|db.connectionString = jdbc:mysql://$DB_TEST_IP:3306/shopping-cart|"  src/application.properties
          sed -i "s|db.username =.*|db.username = $DB_TEST_USERNAME|" src/application.properties
          sed -i "s|db.password =.*|db.password = $DB_TEST_PWD|" src/application.properties
          


      - name: Login to Docker Hub 
        uses: docker/login-action@v3 
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push docker image to Dockerhub 
        uses: docker/build-push-action@v5
        with: 
          context: ./
          push: true 
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{env.DOCKER_REPO}}:test
           # - ${{ secrets.DOCKERHUB_USERNAME }}/${{ DOCKER_REPO }}:${{GITHUB_RUN_NUMBER}}
  
  DeployToTestEnv:
    runs-on: ubuntu-latest 
    needs: BuildAndPushForTesting 
    env: 
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_REPO: shopping-cart
      APP: shopping-cart-app 
      APP_PORT: 8081 
      
    steps:
      - name: Execute SSH commmands on remote server
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: ${{ secrets.TEST_HOST_USER }}@${{secrets.TEST_HOST_IP}}
          privateKey: ${{ secrets.TEST_HOST_PRIVATE_KEY }}
          command: |
            docker stop ${{env.APP}} 
            sleep 2
            docker pull ${{env.DOCKER_USER }}/${{env.DOCKER_REPO}}:test
            sleep 2
            docker run --name ${{env.APP}} -d --rm -p ${{env.APP_PORT}}:8080 ${{env.DOCKER_USER }}/${{env.DOCKER_REPO}}:test

  # BuildAndPushForProduction:
  #   runs-on: ubuntu-latest 
  #   needs: DeployToTestEnv
  #   environment: production
  #   env: 
  #     DOCKER_REPO: shopping-cart 
  #   steps: 
  #     - name: Code Checkout 
  #       uses: actions/checkout@v4 

  #     - name: Update application.properties file
  #       env:
  #          DB_PROD_IP: ${{ secrets.DB_PROD_IP }}
  #          DB_PROD_USERNAME: ${{ secrets.DB_PROD_USERNAME }}
  #          DB_PROD_PWD: ${{ secrets.DB_PROD_PWD }}      
      
  #       run: |
  #         sed -i "s|db.connectionString =.*|db.connectionString = jdbc:mysql://$DB_PROD_IP:3306/shopping-cart|"  src/application.properties
  #         sed -i "s|db.username =.*|db.username = $DB_PROD_USERNAME|" src/application.properties
  #         sed -i "s|db.password =.*|db.password = $DB_PROD_PWD|" src/application.properties

  #     - name: Login to Docker Hub 
  #       uses: docker/login-action@v3 
  #       with: 
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and Push docker image to Dockerhub 
  #       uses: docker/build-push-action@v5
  #       with: 
  #         context: ./
  #         push: true 
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{env.DOCKER_REPO}}:prod
  #          # - ${{ secrets.DOCKERHUB_USERNAME }}/${{ DOCKER_REPO }}:${{GITHUB_RUN_NUMBER}}

  # DeployToKubernetes:
  #   runs-on: ubuntu-latest 
  #   needs: BuildAndPushForProduction
  #   steps:
  #     - name: Code Checkout 
  #       uses: actions/checkout@v4  
  #     - name: Setup Kubernetes Configuration
  #       uses: tale/kubectl-action@v1
  #       with:
  #         base64-kube-config: ${{ secrets.KUBE_CONFIG }} 
  #     - name: Depoloy To Kubernetes 
  #       # run: kubectl apply -f kubernetes/application/shopping-cart-app-deployment.yaml -n app-namespace
  #       run: kubectl rollout restart deployment shopping-cart-java-app -n app-namespace
            

           
           
           
    
       
    
  
          
       
         



          



        
    
